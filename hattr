#!/usr/bin/env perl

################################################################################
# Mode options
# -l    Default: Print some status line
# -n    Write new metadata where it doesn't exist
# -v    Verify metadata where it exists
# -a    Combination -n & -v
# -x    Delete all metadata.
# -i    (import)
# -e    (export)
# TODO  option to disable symlink following

################################################################################
# Output: status column
#  		[space] no metadata
# ?		initial-hashed but unverified
# V		last verification passed
# X		last verification failed

use strict;
use warnings;

use DateTime qw(now);
use IPC::Run qw(run);

my $mode = shift;

die "Incorrect usage!\n" if (not defined $mode && $mode =~ m/^-[lnvaxe]$/);

my $no_follow_symlinks = 0;

foreach my $item (@ARGV) {
	die "Path '$item' not found" if (not -e $item);
	die "Path '$item' is not a file" if (not (-f $item or -d $item));
}

foreach my $item (@ARGV) {
	&item_process($item, $mode);
}

exit(0);

################################################################################
# Initial-hash the file if it hasn't already been done
sub item_process {
    my ($item,$mode) = @_;

	if (-d $item) {
		opendir(my $handle, $item) or die "Cannot open directory '$!'";
		my @list = readdir($handle);

		foreach my $nested (@list) {
			next if $nested eq "." or $nested eq "..";
			&item_process("$item/$nested", $mode);
		}

		closedir($handle);
		
		return;
	}

	return &file_remove($item) if ($mode =~ m/-x/);
	return &file_export($item) if ($mode =~ m/-e/);
	return print_status($item, 'L') if ($no_follow_symlinks);
	#return &file_list  ($item) if ($mode =~ m/-l/);
	return &file_new   ($item) if ($mode =~ m/-n/);
	return &file_verify($item) if ($mode =~ m/-v/);
	return &file_all   ($item) if ($mode =~ m/-a/);
}

################################################################################
# Initial-hash the file if it hasn't already been done
sub file_new {
    my ($file) = @_;

	my $m = &meta_get($file);
	return if not defined $m;
	my %meta = %{$m};

	if (not defined $meta{md5}) {
		&hash_and_store($file);
		return print_status($file, 'N');
	}

	return print_status($file, $meta{state} // '?');
}

################################################################################
# Verify the file if it's been initial-hashed
sub file_verify {
	my ($file) = @_;

	my $m = &meta_get($file);
	return if not defined $m;
	my %meta = %{$m};

	return print_status($file, ' ') unless (defined $meta{md5}); # No existing hash? Skip file

	if (&verify_hash($file, $meta{md5})) {
		my $script = sprintf(
			qq(# file: %s\nuser.hattr.state="V"\nuser.hattr.vtime="%s"),
			setfattr_restore_filename($file), # Handle newlines in filenames
			DateTime->now);

		run [ 'setfattr', '--restore=-' ], \$script;
		print_status($file, 'V');
	}
	else {
		my $script = sprintf(
			qq(# file: %s\nuser.hattr.state="X"),
			setfattr_restore_filename($file)); # Handle newlines in filenames

		run [ 'setfattr', '--restore=-' ], \$script;
		print_status($file, 'X');
	}
}

################################################################################
# Verify the file if it's been initial-hashed; otherwise initial-hash it
sub file_all {
	my ($file) = @_;

	my $m = &meta_get($file);
	return if not defined $m;
	my %meta = %{$m};

	return &file_verify($file) if (defined $meta{md5});
	return &file_new($file);
}

################################################################################
# Remove all metadata from the file
sub file_remove {
    my ($file) = @_;

	my $out;
	my $err;

	# Discard stderr and ignore return codes to make a best effort at xattr deletion
	run [ 'setfattr', '--remove=user.hattr.md5'  , $file ], \undef, \$out, \$err;
	run [ 'setfattr', '--remove=user.hattr.htime', $file ], \undef, \$out, \$err;
	run [ 'setfattr', '--remove=user.hattr.state', $file ], \undef, \$out, \$err;
	run [ 'setfattr', '--remove=user.hattr.vtime', $file ], \undef, \$out, \$err;

	print_status($file, ' ');
}

################################################################################
# Print a status line for the file in `md5deep -zl` formst
sub file_export {
    my ($file) = @_;
	my $size = -s $file;

	if ($no_follow_symlinks) {
		printf(
			"%10u  llllllllllllllllllllllllllllllll  %s\n",
			$size,
			&filename_for_output($file));

		return;
	}

	my $m = &meta_get($file);
	return if not defined $m;
	my %meta = %{$m};

	printf(
		"%10u  %s  %s\n",
		$size,
		$meta{md5} // '????????????????????????????????',
		&filename_for_output($file));
}

################################################################################
# HELPERS

sub setfattr_restore_filename {
	return $_[0] =~s/\n/\\012/gr;
}

sub filename_for_output {
	return $_[0] =~ s/\n/\\n/gr;
}

sub print_status {
    my ($file, $status) = @_;

	printf(
		"%s %s\n",
		$status,
		&filename_for_output($file));
}

################################################################################
# Store the supplied hash into a file's metadata
sub store_hash {
    my ($file, $hash) = @_;

	my $script = sprintf(
		qq(# file: %s\nuser.hattr.md5="$hash"\nuser.hattr.htime="%s"),
		$file =~ s/\n/\\012/gr, # Handle newlines in filenames
		DateTime->now); # This is definitely UTC

	run [ 'setfattr', '--restore=-' ], \$script;
}

################################################################################
# Hash the file and write metadata
sub hash_and_store {
    my ($file) = @_;
    my $hash = &hash_content($file);
	&store_hash($file, $hash) if (defined $hash);
}

################################################################################
# Read back a hash from a file and compare
sub verify_hash {
    my ($file,$stored) = @_;
    return &hash_content($file) eq $stored;
}

################################################################################
# Hash the file and return the resulting hash
sub hash_content {
    my ($file) = @_;

	my $out;
	return $1 if (run [ 'md5sum', $file ], \undef, \$out  and  $out =~ /^\\?([\da-f]{32})  /);
	return undef; # Some error occurred
}

################################################################################
# Retrieve metadata from a file's extended attributes
# TODO deduplicate with the version in the tests file
sub meta_get() {
    my ($file) = @_;

	my $out;
	run [ 'getfattr', '-d', $file ], \undef, \$out or return undef;

    open my $fh, '<', \$out;

    my %fields;
    while (<$fh>) {
        next unless m/^[\s]*user.hattr.(md5|htime|state|vtime)="(.*)"[\s]*$/;
        $fields{$1} = $2;
    }

	# Individual validation
	not defined $fields{md5}  or  $fields{md5} =~ /^[\da-f]{32}$/  or  die 'Bad hash!';
	not defined $fields{htime}  or  $fields{htime} =~ /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/  or  die 'Bad htime!';
	not defined $fields{state}  or  $fields{state} =~ /[VX]/  or  die 'Bad state!';
	not defined $fields{vtime}  or  $fields{vtime} =~ /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/  or  die 'Bad htime!';

	# Collective validation: md5 and htime must appear together, and neither state nor vtime must appear without them
	delete @fields{'md5', 'htime', 'state', 'vtime'} if (not (defined $fields{md5} and defined $fields{htime}));
	delete @fields{'state', 'vtime'} if (not defined $fields{state});

    return \%fields;
}