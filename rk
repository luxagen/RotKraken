#!/usr/bin/env perl

################################################################################
# Mode options
# -l    Default: Print some status line
# -n    Write new metadata where it doesn't exist
# -v    Verify metadata where it exists
# -a    Combination -n & -v
# -x    Delete all metadata.
# -i    (import)
# -e    (export)

################################################################################
# Output: status column
#  		[space] no metadata
# ?		initial-hashed but unverified
# V		last verification passed
# X		last verification failed

use strict;
use warnings;

use DateTime qw(now);

my $mode = shift;
my $file = shift;

if (not defined $mode && $mode =~ m/^-[lnvaxe]$/) {
    print "Incorrect usage!\n";
    exit 1;
}

#&mode_list  ($file) if ($mode =~ m/-l/);
&mode_new   ($file) if ($mode =~ m/-n/);
&mode_verify($file) if ($mode =~ m/-v/);
&mode_all   ($file) if ($mode =~ m/-a/);
&mode_remove($file) if ($mode =~ m/-x/);
#&mode_export($file) if ($mode =~ m/-e/);

################################################################################
# Main program loop.
#foreach my $file (@ARGV) {
#}

################################################################################
# Initial-hash the file if it hasn't already been done
sub mode_new {
    my ($file) = @_;

    my $stored = &get_stored_hash($file);

	if (not defined $stored) {
		&hash_and_store($file);
		print "? $file\n";
		return;
	}

	my %meta = &get_meta($file);

	printf "%s $file\n", $meta{state} // '?';
	return;
}

################################################################################
# Verify the file if it's been initial-hashed
sub mode_verify {
	my ($file) = @_;

	my $stored = &get_stored_hash($file);

	unless (defined $stored) {
		# No existing hash - skip file
		print "  $file\n";
		return;
	}

	if (&verify_hash($file, $stored)) {
		my $time = DateTime->now;
		system("setfattr --restore=- <<EOF
# file: $file
user.rk.state=\"V\"
user.rk.vtime=\"$time\"
EOF
");
		print "V $file\n";
	}
	else {
		system("setfattr --restore=- <<EOF
# file: $file
user.rk.state=\"X\"
EOF
");
		print "X $file\n";
	}
}

################################################################################
# Verify the file if it's been initial-hashed; otherwise initial-hash it
sub mode_all {
	my ($file) = @_;

	my $stored = &get_stored_hash($file);

	return &mode_verify($file) if (defined $stored);
	return &mode_new($file);
}

################################################################################
# Remove all metadata from the file
sub mode_remove {
    my ($file) = @_;
    system("setfattr --remove=user.rk.md5   '$file' >/dev/null 2>&1");
    system("setfattr --remove=user.rk.htime '$file' >/dev/null 2>&1");
    system("setfattr --remove=user.rk.state '$file' >/dev/null 2>&1");
    system("setfattr --remove=user.rk.vtime '$file' >/dev/null 2>&1");

	print "  $file\n";
}

################################################################################
# HELPERS

################################################################################
# Store the supplied hash into a file's metadata
sub store_hash {
    my ($file, $hash) = @_;
    my $time = DateTime->now;
    system("setfattr --restore=- <<EOF
# file: $file
user.rk.md5=\"$hash\"
user.rk.htime=\"$time\"
EOF
");
}

################################################################################
# Hash the file and write metadata
sub hash_and_store {
    my ($file) = @_;
    my $hash = &hash_content($file);
	return &store_hash($file, $hash);
}

################################################################################
# Read back a hash from a file and compare
sub verify_hash {
    my ($file, $stored) = @_;
    return &hash_content($file) eq $stored;
}

################################################################################
# Hash the file and return the resulting hash
sub hash_content {
    my ($file) = @_;
    my $hash = `md5sum '$file' | cut -d ' ' -f 1`;
    chomp $hash;
    return $hash;
}

################################################################################
# Read back a hash from a file.
sub get_stored_hash {
    my ($file) = @_;
    my $hash = `getfattr -d '$file' | grep user.rk.md5 | sed 's/user.rk.md5="//' | sed 's/"\$//'`;
    chomp $hash;
    return 32==length($hash) ? $hash : undef;
}

################################################################################
# Retrieve metadata from a file's extended attributes
# TODO deduplicate with the version in the tests file
sub get_meta() {
    my ($file) = @_;

    my $dump=`getfattr -d '$file'`;

    open my $fh, '<', \$dump;

    my %fields;
    while (<$fh>) {
        next unless m/^[\s]*user.rk.(md5|htime|state|vtime)="(.*)"[\s]*$/;
        $fields{$1} = $2;
    }

    return %fields;
}