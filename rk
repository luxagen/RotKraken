#!/usr/bin/env perl

################################################################################
# Mode options
# -x    Clear own metadata from extended attributes
# -e    Export hash log to stdout in the same format as `md5deep -zl`
# -i    Initialise files that are missing metadata
# -v    Verify initialised files with metadata
# -a    Combination of -i & -v

################################################################################
# Output: status column
#  		[space] no metadata
# ?		initial-hashed but unverified
# V		last verification passed
# X		last verification failed

use strict;
use warnings;

use DateTime qw(now);
use File::ExtAttr ':all';
use Digest::MD5::File qw(file_md5_hex);

my $mode = shift;

die "Incorrect usage!\n" if (not defined $mode && $mode =~ m/^-[ivaxe]$/);

my $no_recurse = 0;
my $no_follow_file_symlinks = 1;
my $no_follow_dir_symlinks = 1;

foreach my $item (@ARGV) {
	die "Path '$item' not found" unless -e $item;
	die "Path '$item' is not a file" unless -f $item  or  -d $item;
}

foreach my $item (@ARGV) {
	&item_process($item, $mode);
}

exit(0);

################################################################################
# Process a filesystem item
sub item_process {
    my ($item,$mode) = @_;

	if (-d $item) {
		return if ($no_recurse);
		return if (-l $item  and  $no_follow_dir_symlinks);

		opendir(my $handle, $item) or die "Cannot open directory '$!'";
		my @list = readdir($handle);

		foreach my $nested (@list) {
			next if $nested eq "."  or  $nested eq "..";
			&item_process("$item/$nested", $mode);
		}

		closedir($handle);
		
		return;
	}

	return if (-l $item  and  $no_follow_file_symlinks);
	return &file_remove($item) if ($mode =~ m/-x/);
	return &file_export($item) if ($mode =~ m/-e/);
	return &file_init  ($item) if ($mode =~ m/-i/);
	return &file_verify($item) if ($mode =~ m/-v/);
	return &file_all   ($item) if ($mode =~ m/-a/);
}

################################################################################
# Initial-hash the file if it hasn't already been done
sub file_init {
    my ($file) = @_;

	my $m = &meta_get($file);
	return unless defined $m;
	my %meta = %{$m};

	if (not defined $meta{md5}) {
		&hash_and_store($file);
		return print_status($file, 'N');
	}

	return print_status($file, $meta{state} // '?');
}

################################################################################
# Verify the file if it's been initial-hashed
sub file_verify {
	my ($file) = @_;

	my $m = &meta_get($file);
	return unless defined $m;
	my %meta = %{$m};

	return print_status($file, ' ') unless (defined $meta{md5}); # No existing hash? Skip file

	if (&verify_hash($file, $meta{md5})) {
		&setfattr($file, 'rk.state', 'V');
		&setfattr($file, 'rk.vtime', DateTime->now);
		print_status($file, 'V');
	}
	else {
		&setfattr($file, 'rk.state', 'X');
		print_status($file, 'X');
	}
}

################################################################################
# Verify the file if it's been initial-hashed; otherwise initial-hash it
sub file_all {
	my ($file) = @_;

	my $m = &meta_get($file);
	return unless defined $m;
	my %meta = %{$m};

	return &file_verify($file) if (defined $meta{md5});
	return &file_init($file);
}

################################################################################
# Remove all metadata from the file
sub file_remove {
    my ($file) = @_;

	my $out;
	my $err;

	# Discard stderr and ignore return codes to make a best effort at xattr deletion

	foreach ('md5', 'htime', 'state', 'vtime') {
		&delfattr($file, "rk.$_");
	}

	print_status($file, ' ');
}

################################################################################
# Print a status line for the file in `md5deep -zl` formst
sub file_export {
    my ($file) = @_;
	my $size = -s $file;

	my $m = &meta_get($file);
	return unless defined $m;
	my %meta = %{$m};

	printf(
		"%10u  %s  %s\n",
		$size,
		$meta{md5} // '????????????????????????????????',
		&filename_for_output($file));
}

################################################################################
# HELPERS

sub filename_for_output {
	return $_[0] =~ s/\n/\\n/gr;
}

sub print_status {
    my ($file, $status) = @_;

	printf(
		"%s %s\n",
		$status,
		&filename_for_output($file));
}

################################################################################
# Store the supplied hash into a file's metadata
sub store_hash {
    my ($file, $hash) = @_;

	&setfattr($file, 'rk.md5', $hash);
	&setfattr($file, 'rk.htime', DateTime->now);
}

################################################################################
# Hash the file and write metadata
sub hash_and_store {
    my ($file) = @_;
    my $hash = &hash_content($file);
	&store_hash($file, $hash) if defined $hash;
}

################################################################################
# Read back a hash from a file and compare
sub verify_hash {
    my ($file, $stored) = @_;
    return &hash_content($file) eq $stored;
}

################################################################################
# Hash the file and return the resulting hash
sub hash_content {
    my ($file) = @_;
	return &file_md5_hex($file);
}

################################################################################
# Retrieve metadata from a file's extended attributes
# TODO deduplicate with the version in the tests file
sub meta_get() {
    my ($file) = @_;

	my $out;

	my %fields;

	foreach my $key ('md5', 'htime', 'state', 'vtime') {
		my $value = &getfattr($file, "rk.$key");
		$fields{$key} = $value if defined $value;
	}

	# Individual validation
	die 'Bad hash!'  if defined   $fields{md5}    and  $fields{md5}   !~ /^[\da-f]{32}$/;
	die 'Bad htime!' if defined   $fields{htime}  and  $fields{htime} !~ /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/;
	die 'Bad state!' if defined   $fields{state}  and  $fields{state} !~ /[VX]/;
	die 'Bad htime!' if defined   $fields{vtime}  and  $fields{vtime} !~ /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/;

	# Collective validation: md5 and htime must appear together, and neither state nor vtime must appear without them
	delete @fields{'md5', 'htime', 'state', 'vtime'} unless  defined $fields{md5} and defined $fields{htime};
	delete @fields{'state', 'vtime'} unless defined $fields{state};

    return \%fields;
}