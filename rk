#!/usr/bin/env perl

use utf8;
use strict;
use warnings;

use DateTime qw(now);
use File::ExtAttr ':all';
use Digest::MD5;
use Getopt::Lucid qw( :all );

our $BLK = 1048576; # Block size for hashing loop
our $errorCount = 0;

my @options_spec = (
	Switch(       '--clear|-x')->doc('Clear metadata from extended attributes'      ),
	Switch(       '--quiet|-q')->doc('Suppress stdout logging'                      ),
	Switch(     '--unquiet|-Q')->doc('Force stdout logging (ignore .rk.quiet files)'),
	Switch(      '--export|-e')->doc('Log files to stdout in `md5deep -zl` format'  ),
	Switch(    '--relative|-r')->doc('Log paths relative to each tree argument'     ),
	Switch(        '--init|-i')->doc('Initialise files that are missing metadata'   ),
	Switch(      '--update|-u')->doc('Update metadata for changed files'            ),
	Switch(      '--verify|-v')->doc('Verify initialised files against metadata'    ),
	Switch(   '--verify-ro|-V')->doc('As --verify, but don\'t update metadata'      ),
	Switch(        '--help|-h')->doc('Print usage (this)'                           ),
);

# read config in a way that means we can output usage info
# https://github.com/dagolden/Getopt-Lucid/blob/e39a85a03d838020d53eb0490b4a567b550d398b/lib/Getopt/Lucid.pm#L1480-L1492
my $options = Getopt::Lucid->getopt(\@options_spec, {strict => 1})->validate();

usage() and exit(0) if $options->get_help;

STDOUT->autoflush(1);
STDERR->autoflush(1);

my $mode_clear       = $options->get_clear    ;
my $mode_export      = $options->get_export   ;
my $mode_relative    = $options->get_relative ;
my $mode_init        = $options->get_init     ;
my $mode_update      = $options->get_update   ;
my $mode_verify      = $options->get_verify   ;
my $mode_ro          = $options->get_verify_ro;
my $mode_quiet       = $options->get_quiet    ;
our $mode_unquiet    = $options->get_unquiet  ;

my $no_recurse = 0;
my $no_follow_symlinks = 1;

if ($mode_ro) {
	die 'Read-only verify [-V] cannot be combined with verify [-v]!' if $mode_verify;
	$mode_verify = 1;
}

if ($mode_clear and ($mode_init or $mode_verify)) {
	die 'Clear [-x] cannot be combined with initialise [-i] or verify [-v]!';
}

# remaining non-option arguments should be the file/folder list to process
print("Error: No paths specified.\n\n") and usage() and exit(1) unless @ARGV;
foreach my $item (@ARGV) {
	print "Path '$item' not found\n" and exit(2) unless -e $item;
	print "Path '$item' is not a file\n" and exit(3) unless -f $item  or  -d $item;
}

foreach my $item (@ARGV) {
	use File::chdir;
	local $CWD;

	if ($mode_relative) {
		$CWD = $item; # Scoped change-directory
		$item = '.';
	}

	&item_process($item, $mode_quiet);
}

exit($errorCount > 0);

sub usage {
	print "RotKraken v2.0, copyright Â© 2020-2023 Luxagen\n\n";

	print $options->usage();

	print <<EOF
        arguments: the list of paths to process

Status characters:

        |   char  | meaning                               |
        | ------- | -------                               |
        | <space> | No metadata or just removed           |
        |       N | Just hashed, metadata added           |
        |       ? | Previously hashed but never verified  |
        |       V | Last verify passed, vtime updated     |
        |       X | Last verify failed, vtime not updated |

https://github.com/luxagen/RotKraken

EOF
}

################################################################################
# Process a filesystem item
sub item_process {
	my ($item, $quiet) = @_;

	return undef if -l $item  and  $no_follow_symlinks;

	stat($item);

	return &file_process($item, $quiet, \*_) if -f *_;

	return undef unless -d *_;

	return if -z "$item/.rk.skip"  or  $no_recurse; # The first check could be done later but this makes skipping as fast as possible

	my (%kids_quiet, %kids_skip);
	$quiet = &marker_inherit($item, $quiet, '.rk.quiet', \%kids_quiet);
	&marker_inherit($item, undef, '.rk.skip', \%kids_skip);

	my $handle;
	unless (opendir($handle, $item)) {
		warn "$item: cannot open directory\n";
		return undef;
	}

	$item =~ s/\/$//; # Remove any trailing slash before concatenating

	foreach my $nested (readdir($handle)) {
		next if $nested eq "."  or  $nested eq "..";
		next if exists $kids_skip{$nested};

		my $kidPath = ($item eq '.') ? $nested : "$item/$nested";
		&item_process($kidPath, $quiet  ||  defined $kids_quiet{$nested});
	}

	closedir($handle);

	return 1;
}

################################################################################
# Get a file's mtime as a DateTime
sub file_mtime {
	my ($file, $hStat) = @_; # The stat handle won't survive into the callee unless it's passed by ref

	my @stat = (stat(${$hStat})); # I'm not sure why, but the outer parens are required

	unless (scalar(@stat) > 9) {
		warn "$file: cannot stat() mtime\n";
		return undef;
	}

	return DateTime->from_epoch(epoch => $stat[9]);
}

################################################################################
# This implements both initialisation and verification
sub file_process {
	my ($file, $quiet, $hStat) = @_;

	if ($mode_clear) {
		foreach ('md5', 'htime', 'state', 'vtime') {
			&delfattr($file, "rk.$_");
		}

		return &print_status($quiet, $file, ' ', undef);
	}

	my $m = &meta_get($file);

	return undef unless defined $m;

	my %meta = %{$m};

	unless (defined $meta{md5}) {
		return &print_status($quiet, $file, 'N', &hash_and_store($file)) if $mode_init;
	}
	elsif ($mode_update or $mode_verify) { # Extra outer guard for efficiency
		my $mtime = &file_mtime($file, \$hStat); # The stat handle won't survive into the callee unless we pass by ref

		return undef unless defined $mtime;

		if ($mtime gt DateTime->now) {
			++$errorCount;
			return &print_status($quiet, $file, '!', $meta{md5}) if $mtime gt DateTime->now->iso8601;
		}

		if ($mode_update) {
			return &print_status($quiet, $file, 'U', &hash_and_store($file, \%meta)) if $mtime gt $meta{htime};
		}

		if ($mode_verify) {
			# Skip file if stale
			if ($mtime gt $meta{htime}) {
				++$errorCount;
				return &print_status($quiet, $file, 'S', $meta{md5});
			}

			if (&verify_hash($file, $meta{md5})) {
				unless ($mode_ro  or  &setfattr($file, 'rk.state', 'V') and &setfattr($file, 'rk.vtime', DateTime->now)) {
					warn "$file: cannot update xattrs\n";
					++$errorCount;
				}

				return &print_status($quiet, $file, 'V', $meta{md5});
			}

			++$errorCount;
			unless ($mode_ro) {
				unless (&setfattr($file, 'rk.state', 'X')) {
					warn "$file: cannot update xattrs\n";
					++$errorCount;
				}
			}
			return &print_status($quiet, $file, 'X', $meta{md5});
		}
	}

	return &print_status($quiet, $file, (exists $meta{htime} ? $meta{state} : ' ') // '?', $meta{md5});
}

################################################################################
# HELPERS

sub filename_for_output {
	return $_[0] =~ s/\n/\\n/gr;
}

sub print_status {
	my ($quiet, $file, $status, $hash) = @_;

	return unless $mode_unquiet  or  not $quiet;

	if ($mode_export) {
		printf(
			"%10u  %s  %s\n",
			-s $file,
			('!' ne $status)  ?  $hash // '????????????????????????????????'  :  '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!',
			&filename_for_output($file));
	}
	else {
		printf(
			"%s %s\n",
			$status,
			&filename_for_output($file));
	}
}

################################################################################
# Store the supplied hash into a file's metadata
sub store_hash {
	my ($file, $hash) = @_;

	unless (&setfattr($file, 'rk.md5', $hash) and &setfattr($file, 'rk.htime', DateTime->now)) {
		warn "$file: cannot set xattrs\n";
		++$errorCount;
	}
}

################################################################################
# Hash the file and write metadata
sub hash_and_store {
	my ($file) = @_;
	my $hash = &hash_content($file);
	&store_hash($file, $hash);
	return $hash;
}

################################################################################
# Read back a hash from a file and compare
sub verify_hash {
	my ($file, $stored) = @_;
	return &hash_content($file) eq ($stored // '');
}

################################################################################
# Hash the file and return the resulting hash
sub hash_content {
	my ($file) = @_;

	my $hasher = Digest::MD5->new;

	open(my $in_fh,  "<", $file) || die;
	binmode($in_fh) || die;
	while (read($in_fh, my $buffer, $BLK)) {
		$hasher->add($buffer);
	}
	close($in_fh) || die;

	my $hash = $hasher->hexdigest;
	die unless defined $hash;
	return $hash;
}

################################################################################
# Retrieve metadata from a file's extended attributes
# TODO deduplicate with the version in the tests file
sub meta_get() {
	my ($file) = @_;

	unless (-r $file) {
		warn "$file: not readable\n";
		return undef;
	}

	my %fields;

	foreach my $key ('md5', 'htime', 'state', 'vtime') {
		my $value = &getfattr($file, "rk.$key");
		$fields{$key} = $value if defined $value;
	}

	# Individual validation
	my ($bad_md5, $bad_htime, $bad_state, $bad_vtime) = (
		defined $fields{md5}    &&  $fields{md5}   !~ /^[\da-f]{32}$/,
		defined $fields{htime}  &&  $fields{htime} !~ /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/,
		defined $fields{state}  &&  $fields{state} !~ /[VX]/,
		defined $fields{vtime}  &&  $fields{vtime} !~ /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/,
	);

	warn "$file: Bad hash \n" if $bad_md5;
	warn "$file: Bad htime\n" if $bad_htime;
	warn "$file: Bad state\n" if $bad_state;
	warn "$file: Bad htime\n" if $bad_vtime;

	return undef if $bad_md5 or $bad_htime or $bad_state or $bad_vtime;

	# Collective validation: md5 and htime must appear together, and neither state nor vtime must appear without them
	delete @fields{'md5', 'htime', 'state', 'vtime'} unless  defined $fields{md5} and defined $fields{htime};
	delete @fields{'state', 'vtime'} unless defined $fields{state};

	return \%fields;
}

################################################################################
# Read a file containing a set of items, one per line, into the keys of a hash
sub marker_read() {
	my ($marker_path, $hashref) = @_;

	my $fh;
	unless (open $fh, $marker_path) {
		warn "$marker_path: cannot read marker file\n";
		return undef;
	}

	while (<$fh>) {
		next if /^#/; # Skip comment lines
		$_ =~ s/^\\//; # Unescape backslashes (will need revising if/when items can be in subdirs)
		chomp; # Remove newline
		${$hashref}{$_} = 0; # Dummy value so that the item is defined
	}

	close $fh;
}

sub marker_inherit {
	my ($item_path, $inherited, $label_name, $ref_kids) = @_;

	my $label_path = "$item_path/$label_name";

	return 1 if $inherited  or  -z $label_path; # If this directory is marked, children are implicitly marked too

	&marker_read($label_path, $ref_kids) if -e $label_path; # This dir is not marked, so we must look at child marks
	return 0;
}
